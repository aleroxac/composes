# syntax=docker/dockerfile:1
version: "3"



networks:
  composes:



services:
  mongodb:
    container_name: mongodb
    hostname: mongodb
    restart: always
    image: mongo:5.0.28
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    networks:
      - composes
    healthcheck:
      test: ["CMD-SHELL", "mongo --eval 'db.runCommand(\"ping\").ok' localhost:27017/test --quiet || echo OK"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  migrations:
    hostname: migrations
    container_name: migrations
    restart: no
    image: migrate/migrate:v4.17.1
    command: -path=/migrations -database "mongodb://root:root@mongodb:27017/orders" -verbose up
    environment:
      MYSQL_DATABASE: orders
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ./migrations/mongodb:/migrations
    networks:
      - composes
    depends_on:
      mongodb:
        condition: service_healthy

  mongo-express:
    container_name: mongo-express
    hostname: mongo-express
    restart: always
    image: mongo-express:1.0.2-20-alpine3.19
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
      ME_CONFIG_MONGODB_URL: mongodb://root:root@mongo:27017/
      ME_CONFIG_BASICAUTH: false
    networks:
      - composes
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "netstat -t | grep -E 'mongodb.*ESTABLISHED'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
